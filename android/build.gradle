// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        maven { url uri("$rootDir/repo") }
        mavenLocal()
        maven { url 'https://s01.oss.sonatype.org/content/repositories/public/' }
        maven { url = uri("https://oss.sonatype.org/content/repositories/snapshots/") }
        maven { url 'https://maven.aliyun.com/repository/google/' }
        maven { url "https://maven.aliyun.com/repository/public" }
        maven { url = uri("https://artifact.bytedance.com/repository/byteX/") }
        google()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://plugins.gradle.org/m2/" }
        maven{ url "https://dl.bintray.com/kotlin/kotlin-eap"}

    }
    dependencies {
        classpath "com.android.tools.build:gradle:7.3.1"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${KOTLIN_VERSION}"
        classpath "com.alibaba:arouter-register:1.0.2"
        classpath "io.github.meituan-dianping:plugin:1.2.1"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
        classpath 'com.google.gms:google-services:4.3.8'
//        classpath 'com.google.firebase:perf-plugin:1.4.0'
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:2.3.5"
        classpath('com.tencent.tinker:tinker-patch-gradle-plugin:1.9.14.19')
    }
}
plugins {
    id("io.github.jamesfchen.ibc-plugin") apply(false)
    id("io.github.jamesfchen.module-publisher-plugin") apply(false)
}
allprojects {
    configurations.all {
        // don't cache changing modules at all，check for updates every build
        //一般在开发模式下，我们可以频繁的发布SNAPSHOT版本，
        // 以便让其它项目能实时的使用到最新的功能做联调；当版本趋于稳定时，再发布一个正式版本，供正式使用。
        // SNAPSHOT版本可能会频繁更新但是版本号是不变的，需要取消缓存策略
        //gradlew build --refresh-dependencies前置刷新依赖
        // [理解Maven中的SNAPSHOT版本和正式版本](https://www.cnblogs.com/huang0925/p/5169624.html)
        //[更新maven组件的坑](https://qa.1r1g.com/sf/ask/2944103851/)
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        resolutionStrategy {
            //出现两个不同版本时会报错，比如：glide:4.8 与 glide：4.11
//            failOnVersionConflict()
//            force 'com.github.bumptech.glide:glide:4.11.0'
//            force 'androidx.fragment:fragment:1.3.6'app_config
//            force 'androidx.fragment:fragment-ktx:1.3.5'
        }

//    resolutionStrategy.eachDependency {
//        if (it.requested.group == 'com.android.support'
//                && !it.requested.name.contains('multidex')) {
//            it.useVersion
//        }
//    }
    }
    repositories {
        maven { url uri("$rootDir/repo") }
        mavenLocal()
        maven { url 'https://s01.oss.sonatype.org/content/repositories/public/' }
        maven { url = uri("https://oss.sonatype.org/content/repositories/snapshots/") }
        maven { url "https://maven.aliyun.com/repository/public" }
        maven { url = uri("https://artifact.bytedance.com/repository/byteX/") }
        maven { url "https://jitpack.io" }
        mavenCentral()
        google()
        gradlePluginPortal()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    tasks.withType(JavaCompile).all {
        sourceCompatibility = JavaVersion.VERSION_11.majorVersion
        targetCompatibility = JavaVersion.VERSION_11.majorVersion
    }
    tasks.withType(Test).all {
        testLogging {
            exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
            showExceptions = true
            showCauses = true
            showStackTraces = true
        }
    }
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all{
        kotlinOptions {
            jvmTarget = JavaVersion.VERSION_11.majorVersion
            apiVersion = "1.5"
            freeCompilerArgs = ["-Xno-optimized-callable-references"]
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}