import groovy.json.JsonSlurper

def child(Object msg) {
    println("👶[ gradle initialzation ] " + msg);
}
/**
 * 读取module_config.json信息以此来include具体的模块，对于模块的描述应该有这些信息
 * class Module{
 *    require  def simpleName 模块名的简写,给idea plugin读取
 *    require def format 模块格式(bundle foundation jar ,bundle可以不参加编译，即exclude，但是framwork foundation必须被include)
 *    require def group 分组是为了当exclude某个app时，其下的依赖的同组模块也会exclude
 *    require def type {api,processor,tool} 对于framework内部的模块来说，有暴露给app层的api模块，还有有processor、tool
 *    require def sourcePath :components:hotel-module:foundation
 *    require def binaryPath default: {package}:simpleName:1.0.0 ,默认的binary_artifact需要保证simpelName唯一性,先暂时用1.0.0站位，后面应该通过获取远程版本和本地版本进行自动升级
 *    option def deps 不应有这个属性，要编译成什么应该通过excludeModule和sourceModule,默认都是aar编译//option def build_source(source or binary),binary(aar jar)编译更快
 *}
 */
def config = new JsonSlurper().parse(file("$rootDir/module_config.json"))
gradle.ext.allModules = config.allModules
gradle.ext.groupId = config.groupId
gradle.ext.activeBuildVariant = config.activeBuildVariant
def localProperties = new Properties()
def localPropertiesFile = new File(rootDir, 'local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}
def excludeModulesStr = localProperties.getProperty('excludeModules', '')
def sourceModulesStr = localProperties.getProperty('sourceModules', '')
gradle.ext.excludeModuleMap = new LinkedHashMap<String, Object>()
gradle.ext.sourceModuleMap = new LinkedHashMap<String, Object>()
gradle.ext.binaryModuleMap = new LinkedHashMap<String, Object>()
gradle.ext.framworkSrcModuleMap = [:] //目前只使用了7个fwk的模块，其余模块暂且搁置
gradle.ext.framworkApiModuleMap = [:]
gradle.ext.bundleSrcModuleMap = [:]
gradle.ext.sourcePath2SimpleNameMap = [:]
def findModule = { name ->
    for (def m : gradle.ext.allModules) {
        if (m.simpleName == name) {
            return m
        }
    }
    return null
}
String.metaClass.eachAfterSplit { reg, Closure closure ->
    delegate.split(reg).each { name ->
        def m = findModule(name)
        if (m != null) {
            closure.call(m)
        }
    }
}
excludeModulesStr.eachAfterSplit(',') {
    gradle.ext.excludeModuleMap[it.simpleName] = it
}
sourceModulesStr.eachAfterSplit(',') {
    gradle.ext.sourceModuleMap[it.simpleName] = it
    gradle.ext.sourcePath2SimpleNameMap[it.sourcePath] = it.simpleName
    if (it.group == 'fwk') {
        gradle.ext.framworkSrcModuleMap[it.simpleName] = it
    }
    if (it.format.contains('bundle')) {
        gradle.ext.bundleSrcModuleMap[it.simpleName] = it
    }
}
gradle.ext.allModules.each { m ->
    if (m.type == 'api') {
        gradle.ext.framworkApiModuleMap[m.simpleName] = m
    }
    m.binaryPath = "${gradle.ext.groupId}:${m.simpleName}:1.0.0-${gradle.ext.activeBuildVariant}-SNAPSHOT"
    if (!gradle.ext.sourceModuleMap.containsKey(m.simpleName) && !gradle.ext.excludeModuleMap.containsKey(m.simpleName)) {
        gradle.ext.binaryModuleMap[m.simpleName] = m
    }
}
child("module begin ========================================================================================")
gradle.ext.sourceModuleMap.each { name, module ->
    child("source module\t${module.sourcePath}")
    if (module.simpleName == 'framework-flutter') {
        setBinding(new Binding([gradle: this]))
        evaluate(new File(settingsDir, 'script/flutter/include_flutter.gradle'))
    } else {
        include module.sourcePath
        if (module.projectDir) {
            project(module.sourcePath).projectDir = new File(rootProject.projectDir, module.projectDir)
        }
    }
}
gradle.ext.excludeModuleMap.each { _, module ->
    child("\u001B[31mexclude module\u001B[0m\t${module.sourcePath}")
}
gradle.ext.binaryModuleMap.each { _, module ->
    child("binary module\t${module.binaryPath}")
}

child("module end ========================================================================================")
//这些只能在settings.gradle使用,是属于初始化阶段的钩子
//gradle.settingsEvaluated {
//    println("settingsEvaluated")
//
//}
//gradle.projectsLoaded { g ->
//    println("projectsLoaded")
//}
gradle.ext.modules = gradle.ext.sourceModuleMap.values() + gradle.ext.binaryModuleMap.values()


//######################################################################################################################